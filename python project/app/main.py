import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streamlit as st
from core.data_loader import load_seed
from core import frp
from core.transforms import (
    add_task, filter_by_status, avg_tasks_per_user,
    by_priority, by_assignee, by_date_range,
    walk_comments, traverse_tasks,
    overdue_tasks, measure_cache_performance,
    safe_task, validate_task, create_task_pipeline
)
from core.report import (
    overview_stats, project_overview_report, filtered_tasks_report,
    user_workload_report, overdue_tasks_report_cached, performance_comparison_report,
    safe_task_report, validation_report, pipeline_report, generate_summary_report
)
from core.ftypes import Maybe, Some, Nothing, Either, Right, Left
from core.domain import Task
import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
projects, users, tasks, comments = load_seed()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EventBus –≤ session_state
if "bus" not in st.session_state:
    st.session_state.bus = frp.EventBus()
    st.session_state.events = []

    def log_event(ev):
        st.session_state.events.append(ev)

    st.session_state.bus.subscribe("task_created", log_event)
    st.session_state.bus.subscribe("task_updated", log_event)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if "current_page" not in st.session_state:
    st.session_state.current_page = "–ø—Ä–æ–µ–∫—Ç—ã"

# üé® –°—Ç–∏–ª–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
st.markdown(
    """
    <style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ */
    :root{
        --bg: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --bg-solid: #667eea;
        --sidebar-bg: rgba(255,255,255,0.1);
        --card: rgba(255,255,255,0.95);
        --card-hover: rgba(255,255,255,1);
        --text: #2d3748;
        --text-light: #4a5568;
        --muted: #718096;
        --brand: #4299e1;
        --brand-700: #2b6cb0;
        --brand-50: rgba(66,153,225,0.1);
        --success: #48bb78;
        --warning: #ed8936;
        --danger: #f56565;
        --info: #4299e1;
        --radius: 16px;
        --shadow: 0 10px 25px rgba(0,0,0,0.15);
        --shadow-hover: 0 15px 35px rgba(0,0,0,0.2);
        --border: rgba(255,255,255,0.2);
        --input: rgba(255,255,255,0.9);
        --sidebar-width: 250px;
    }

    /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
    .main .block-container {
        max-width: 1200px !important;
        padding: 20px !important;
    }

    /* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω */
    .main {
        background: var(--bg);
        background-attachment: fixed;
        color: var(--text);
        min-height: 100vh;
    }
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è body */
    .stApp {
        background: var(--bg);
        background-attachment: fixed;
    }

    /* –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ */
    .project-card {
        padding: 20px 24px;
        border-radius: var(--radius);
        margin: 12px 0;
        background: var(--card);
        color: var(--text) !important;
        font-weight: 600;
        border: 1px solid var(--border);
        box-shadow: var(--shadow);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }
    
    .project-card:hover {
        background: var(--card-hover);
        box-shadow: var(--shadow-hover);
        transform: translateY(-2px);
    }

    /* –ë–ª–æ–∫–∏ –∑–∞–¥–∞—á */
    .task-table{ 
        background: var(--card);
        color: var(--text) !important;
        border: 1px solid var(--border);
        border-radius: var(--radius);
        padding: 18px 20px;
        box-shadow: var(--shadow);
        margin: 12px 0;
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }
    
    .task-table:hover {
        background: var(--card-hover);
        box-shadow: var(--shadow-hover);
        transform: translateY(-1px);
    }

    /* –¶–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ */
    .status-todo { color: var(--muted) !important; font-weight: 600; }
    .status-in_progress { color: var(--warning) !important; font-weight: 600; }
    .status-review { color: var(--info) !important; font-weight: 600; }
    .status-done { color: var(--success) !important; font-weight: 600; }
    .priority-low { color: var(--muted) !important; font-weight: 500; }
    .priority-medium { color: var(--warning) !important; font-weight: 500; }
    .priority-high { color: var(--danger) !important; font-weight: 600; }
    .priority-critical { color: #e53e3e !important; font-weight: 700; }

    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton>button{
        background: linear-gradient(135deg, var(--brand) 0%, var(--brand-700) 100%);
        color: #fff;
        border: none;
        padding: 0.6rem 1.2rem;
        border-radius: 999px;
        box-shadow: var(--shadow);
        font-weight: 600;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    }
    .stButton>button:hover{ 
        background: linear-gradient(135deg, var(--brand-700) 0%, #1a365d 100%); 
        transform: translateY(-2px); 
        box-shadow: var(--shadow-hover);
    }
    .stButton>button:active{ 
        transform: translateY(0); 
        box-shadow: var(--shadow);
    }

    /* –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º */
    .stTextInput>div>div>input,
    .stTextArea textarea,
    .stSelectbox>div>div{
        border-radius: var(--radius) !important;
        background: var(--input) !important;
        color: var(--text) !important;
        border: 1px solid var(--border) !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
        transition: all 0.3s ease !important;
    }
    .stTextInput>div>div>input:focus,
    .stTextArea textarea:focus,
    .stSelectbox>div>div:focus{
        border-color: var(--brand) !important;
        box-shadow: 0 0 0 3px var(--brand-50) !important;
    }
    .stSelectbox div[data-baseweb="select"]>div{ 
        background: var(--input) !important; 
        border-radius: var(--radius) !important;
    }
    ::placeholder{ color: var(--muted) !important; opacity: 1; }

    /* –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∞–π–¥–±–∞—Ä Streamlit */
    .css-1d391kg {display: none;}
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ */
    .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
        color: var(--text) !important;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .stMarkdown h1 {
        background: linear-gradient(135deg, var(--brand) 0%, var(--brand-700) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: 700;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
    .stButton>button {
        margin: 4px;
        font-size: 0.9rem;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */
    .stSuccess {
        background: linear-gradient(135deg, var(--success) 0%, #38a169 100%);
        color: white;
        border-radius: var(--radius);
        padding: 1rem;
        box-shadow: var(--shadow);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */
    .stInfo {
        background: linear-gradient(135deg, var(--info) 0%, var(--brand-700) 100%);
        color: white;
        border-radius: var(--radius);
        padding: 1rem;
        box-shadow: var(--shadow);
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .project-card, .task-table {
        animation: fadeInUp 0.6s ease-out;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
status_labels = {
    "todo": "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é",
    "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
    "review": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
    "done": "–ì–æ—Ç–æ–≤–æ",
}

user_id_to_name = {u.id: u.name for u in users}

priority_labels = {
    "low": "–ù–∏–∑–∫–∏–π",
    "medium": "–°—Ä–µ–¥–Ω–∏–π",
    "high": "–í—ã—Å–æ–∫–∏–π",
    "critical": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π",
}

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ–±—ã—Ç–∏–π
event_name_labels = {
    "task_created": "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞",
    "task_updated": "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
def show_projects_page():
    st.markdown("### üìÇ –ü—Ä–æ–µ–∫—Ç—ã")
    for proj in projects:
        st.markdown(f"<div class='project-card'>üìÅ {proj.name} (–í–ª–∞–¥–µ–ª–µ—Ü: {proj.owner})</div>", unsafe_allow_html=True)

def show_tasks_page():
    st.markdown("### üóÇÔ∏è –ó–∞–¥–∞—á–∏")
    filter_project = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É", ["–í—Å–µ"] + [p.name for p in projects])
    filter_status = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
        ["–í—Å–µ", "todo", "in_progress", "review", "done"],
        format_func=lambda v: "–í—Å–µ" if v == "–í—Å–µ" else status_labels.get(v, v),
    )

    filtered_tasks = tasks
    if filter_project != "–í—Å–µ":
        proj_id = next(p.id for p in projects if p.name == filter_project)
        filtered_tasks = [t for t in filtered_tasks if t.project_id == proj_id]

    if filter_status != "–í—Å–µ":
        filtered_tasks = [t for t in filtered_tasks if t.status == filter_status]

    for task in filtered_tasks:
        st.markdown(
            f"""
            <div class="task-table">
                <b>{task.title}</b><br>
                <span class="status-{task.status}">–°—Ç–∞—Ç—É—Å: {status_labels.get(task.status, task.status)}</span> | 
                <span class="priority-{task.priority}">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_labels.get(task.priority, task.priority)}</span><br>
                üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {user_id_to_name.get(task.assignee, "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω") if task.assignee else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}<br>
                üïí –°–æ–∑–¥–∞–Ω–æ: {task.created}
            </div>
            """,
            unsafe_allow_html=True
        )

def show_task_list_page():
    st.markdown("### üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    for task in tasks:
        st.markdown(
            f"""
            <div class="task-table">
                <b>{task.title}</b><br>
                <span class="status-{task.status}">–°—Ç–∞—Ç—É—Å: {status_labels.get(task.status, task.status)}</span> | 
                <span class="priority-{task.priority}">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_labels.get(task.priority, task.priority)}</span><br>
                üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {user_id_to_name.get(task.assignee, "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω") if task.assignee else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}<br>
                üïí –°–æ–∑–¥–∞–Ω–æ: {task.created}
            </div>
            """,
            unsafe_allow_html=True
        )

def show_events_page():
    st.markdown("### üîî –°–æ–±—ã—Ç–∏—è")
    if st.session_state.events:
        for ev in reversed(st.session_state.events[-10:]):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            payload = ev.payload
            if isinstance(payload, dict):
                title = payload.get("title") or payload.get("id") or ""
                desc = payload.get("desc") or payload.get("text") or ""
                status_key = payload.get("status")
                status_ru = status_labels.get(status_key, status_key) if status_key else None
                priority_key = payload.get("priority")
                priority_ru = priority_labels.get(priority_key, priority_key) if priority_key else None
                assignee_key = payload.get("assignee")
                assignee_name = user_id_to_name.get(assignee_key) if assignee_key else None

                lines = []
                if title:
                    lines.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                if desc:
                    lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
                if status_ru:
                    lines.append(f"–°—Ç–∞—Ç—É—Å: {status_ru}")
                if priority_ru:
                    lines.append(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_ru}")
                if assignee_name:
                    lines.append(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name}")

                pretty = " | ".join(lines) if lines else str(payload)
                date_only = str(ev.ts).split("T")[0]
                event_ru = event_name_labels.get(ev.name, ev.name)
                st.markdown(f"**{date_only}** ‚Äî {event_ru} ‚Üí {pretty}")
            else:
                date_only = str(ev.ts).split("T")[0]
                event_ru = event_name_labels.get(ev.name, ev.name)
                st.markdown(f"**{date_only}** ‚Äî {event_ru} ‚Üí {payload}")
    else:
        st.info("–ü–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É.")

def show_create_task_page():
    st.markdown("### ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    with st.form("new_task"):
        title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
        status = st.selectbox(
            "–°—Ç–∞—Ç—É—Å",
            ["todo", "in_progress", "review", "done"],
            format_func=lambda v: status_labels.get(v, v),
        )
        priority = st.selectbox(
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            ["low", "medium", "high", "critical"],
            format_func=lambda v: priority_labels.get(v, v),
        )
        assignee = st.selectbox(
            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            [None] + [u.id for u in users],
            format_func=lambda v: "" if v is None else user_id_to_name.get(v, v),
        )
        submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")

        if submitted and title:
            new_task = {
                "title": title,
                "desc": desc,
                "status": status,
                "priority": priority,
                "assignee": assignee if assignee else None
            }
            ev = st.session_state.bus.publish("task_created", new_task)
            st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' —Å–æ–∑–¥–∞–Ω–∞!")

# === –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã ===

def show_lab1_overview_page():
    """–õ–∞–±–∞ #1: –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å + HOF - Overview"""
    st.markdown("### üìä –õ–∞–±–∞ #1: Overview (–ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å + HOF)")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = overview_stats(projects, users, tasks)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìÇ –ü—Ä–æ–µ–∫—Ç—ã", stats["projects_count"])
    
    with col2:
        st.metric("üóÇÔ∏è –ó–∞–¥–∞—á–∏", stats["tasks_count"])
    
    with col3:
        st.metric("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", stats["users_count"])
    
    with col4:
        st.metric("üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", f"{stats['avg_tasks_per_user']:.1f}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
    status_dist = stats["status_distribution"]
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìã –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", status_dist["todo"])
    with col2:
        st.metric("üîÑ –í —Ä–∞–±–æ—Ç–µ", status_dist["in_progress"])
    with col3:
        st.metric("üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", status_dist["review"])
    with col4:
        st.metric("‚úÖ –ì–æ—Ç–æ–≤–æ", status_dist["done"])
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–∏—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    st.markdown("#### üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–∏—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'todo'"):
        todo_tasks = filter_by_status(tasks, "todo")
        st.write(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'todo': {len(todo_tasks)}")
        for task in todo_tasks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            st.write(f"- {task.title}")

def show_lab2_filters_page():
    """–õ–∞–±–∞ #2: –õ—è–º–±–¥–∞ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è + —Ä–µ–∫—É—Ä—Å–∏—è - –§–∏–ª—å—Ç—Ä—ã"""
    st.markdown("### üîç –õ–∞–±–∞ #2: –§–∏–ª—å—Ç—Ä—ã (–õ—è–º–±–¥–∞ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è + —Ä–µ–∫—É—Ä—Å–∏—è)")
    
    # –§–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è
    st.markdown("#### üéØ –§–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        priority_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", ["–í—Å–µ"] + list(set(t.priority for t in tasks)))
    
    with col2:
        assignee_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", ["–í—Å–µ"] + [u.id for u in users])
    
    with col3:
        if st.checkbox("–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ"):
            start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime.date.today() - datetime.timedelta(days=30))
            end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime.date.today())
        else:
            start_date = None
            end_date = None
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filters = {}
    if priority_filter != "–í—Å–µ":
        filters["priority"] = priority_filter
    if assignee_filter != "–í—Å–µ":
        filters["assignee"] = assignee_filter
    if start_date and end_date:
        filters["date_range"] = {
            "start": start_date.isoformat(),
            "end": end_date.isoformat()
        }
    
    filtered = filtered_tasks_report(tasks, filters)
    
    st.markdown(f"#### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered)} –∑–∞–¥–∞—á")
    for task in filtered[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        st.markdown(f"- **{task.title}** | {task.status} | {task.priority}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    st.markdown("#### üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    if st.button("–ù–∞–π—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏"):
        if tasks:
            task_comments = walk_comments(comments, tasks[0].id)
            st.write(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ '{tasks[0].title}': {len(task_comments)}")
            for comment in task_comments:
                st.write(f"- {comment.text[:50]}...")
    
    if st.button("–û–±–æ–π—Ç–∏ –∑–∞–¥–∞—á–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤"):
        status_order = ("todo", "in_progress", "review", "done")
        task_ids = traverse_tasks(tasks, status_order)
        st.write(f"ID –∑–∞–¥–∞—á –≤ –ø–æ—Ä—è–¥–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤: {task_ids[:10]}")

def show_lab3_reports_page():
    """–õ–∞–±–∞ #3: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–µ–∫—É—Ä—Å–∏—è + –º–µ–º–æ–∏–∑–∞—Ü–∏—è - Reports"""
    st.markdown("### üìà –õ–∞–±–∞ #3: Reports (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–µ–∫—É—Ä—Å–∏—è + –º–µ–º–æ–∏–∑–∞—Ü–∏—è)")
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    st.markdown("#### üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
    
    if st.button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"):
        rules = ("overdue_7_days", "critical_overdue")
        overdue = overdue_tasks_report_cached(tasks, rules)
        
        st.markdown(f"**–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(overdue)}**")
        for task in overdue:
            st.write(f"- {task.title} | {task.status} | {task.priority}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    st.markdown("#### ‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    if st.button("–ò–∑–º–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞"):
        rules = ("overdue_7_days", "critical_overdue")
        perf = performance_comparison_report(tasks, rules)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (—Å)", f"{perf['first_call_time']:.4f}")
        with col2:
            st.metric("–í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (—Å)", f"{perf['second_call_time']:.4f}")
        with col3:
            st.metric("–£–ª—É—á—à–µ–Ω–∏–µ", f"{perf['cache_improvement']:.1f}x")
        
        st.success(f"–ö—ç—à —É—Å–∫–æ—Ä–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ {perf['cache_improvement']:.1f} —Ä–∞–∑!")
    
    # –û—Ç—á–µ—Ç –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st.markdown("#### üë• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    workload = user_workload_report(tasks, users)
    
    for user_name, stats in workload.items():
        with st.expander(f"üë§ {user_name}"):
            col1, col2, col3, col4, col5 = st.columns(5)
            with col1:
                st.metric("–í—Å–µ–≥–æ", stats["total"])
            with col2:
                st.metric("–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", stats["todo"])
            with col3:
                st.metric("–í —Ä–∞–±–æ—Ç–µ", stats["in_progress"])
            with col4:
                st.metric("–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", stats["review"])
            with col5:
                st.metric("–ì–æ—Ç–æ–≤–æ", stats["done"])

def show_lab4_functional_patterns_page():
    """–õ–∞–±–∞ #4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã Maybe/Either"""
    st.markdown("### üé≠ –õ–∞–±–∞ #4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (Maybe/Either)")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Maybe
    st.markdown("#### üîç Maybe Pattern")
    
    task_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞", "task1")
    
    if st.button("–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É (Maybe)"):
        maybe_task = safe_task(tasks, task_id)
        
        if maybe_task.is_some():
            task = maybe_task.get_or_else(None)
            st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: {task.title}")
            st.write(f"–°—Ç–∞—Ç—É—Å: {task.status} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}")
        else:
            st.error("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Either - –≤–∞–ª–∏–¥–∞—Ü–∏—è
    st.markdown("#### ‚úÖ Either Pattern - –í–∞–ª–∏–¥–∞—Ü–∏—è")
    
    if st.button("–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"):
        rules = ("title_min_length", "desc_min_length", "assignee_required")
        validation_results = validation_report(tasks, rules)
        
        valid_count = 0
        invalid_count = 0
        
        for task_id, result in list(validation_results.items())[:10]:  # –ü–µ—Ä–≤—ã–µ 10
            if result.is_right():
                valid_count += 1
                st.success(f"‚úÖ {task_id}: –í–∞–ª–∏–¥–Ω–∞")
            else:
                invalid_count += 1
                errors = result.map_left(lambda x: x).get_or_else({"errors": []})
                st.error(f"‚ùå {task_id}: {errors.get('errors', [])}")
        
        st.markdown(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:** {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö, {invalid_count} —Å –æ—à–∏–±–∫–∞–º–∏")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
    st.markdown("#### üîÑ Pipeline Pattern")
    
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω"):
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        new_task = Task(
            id="test_task",
            project_id="proj1",
            title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            desc="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞",
            status="todo",
            priority="medium",
            assignee="user1",
            created=datetime.datetime.now().isoformat(),
            updated=datetime.datetime.now().isoformat()
        )
        
        rules = ("title_min_length", "desc_min_length")
        result = create_task_pipeline(tasks, new_task, rules)
        
        if result.is_right():
            st.success("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω!")
            st.write("–ü–∞–π–ø–ª–∞–π–Ω: —Å–æ–∑–¥–∞—Ç—å ‚Üí –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å ‚Üí —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        else:
            errors = result.map_left(lambda x: x).get_or_else({"errors": []})
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {errors.get('errors', [])}")

def show_about_page():
    st.markdown("### ‚ÑπÔ∏è –û –Ω–∞—Å")
    st.markdown("""
    **–¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á | –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç**
    
    –≠—Ç–æ —É—á–µ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
    - **Streamlit** - –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - **Python** - –¥–ª—è –±—ç–∫–µ–Ω–¥ –ª–æ–≥–∏–∫–∏
    - **EventBus** - –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
    
    **–§—É–Ω–∫—Ü–∏–∏:**
    - üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    - üóÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
    - üîî –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
    - üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
    - üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    
    **–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:**
    - **–õ–∞–±–∞ #1**: –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å + HOF
    - **–õ–∞–±–∞ #2**: –õ—è–º–±–¥–∞ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è + —Ä–µ–∫—É—Ä—Å–∏—è
    - **–õ–∞–±–∞ #3**: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–µ–∫—É—Ä—Å–∏—è + –º–µ–º–æ–∏–∑–∞—Ü–∏—è
    - **–õ–∞–±–∞ #4**: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã Maybe/Either
    
    **–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:**
    - –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
    - –í —Ä–∞–±–æ—Ç–µ
    - –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
    - –ì–æ—Ç–æ–≤–æ
    
    **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
    - –ù–∏–∑–∫–∏–π
    - –°—Ä–µ–¥–Ω–∏–π
    - –í—ã—Å–æ–∫–∏–π
    - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π

    **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:**
    - (–ë—ç–∫) –ë–µ–ª—è–ª–æ–≤ –î.–†.
    - (–ë—ç–∫ + —Ñ—Ä–æ–Ω—Ç) –ü–∞–∫ –ù.–í.
    """)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á | –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")

# –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
st.markdown("### üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")

# –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
st.markdown("#### üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
col1, col2, col3, col4, col5, col6 = st.columns(6)

with col1:
    if st.button("üìÇ –ü—Ä–æ–µ–∫—Ç—ã", key="nav_projects", use_container_width=True):
        st.session_state.current_page = "–ø—Ä–æ–µ–∫—Ç—ã"

with col2:
    if st.button("üóÇÔ∏è –ó–∞–¥–∞—á–∏", key="nav_tasks", use_container_width=True):
        st.session_state.current_page = "–∑–∞–¥–∞—á–∏"

with col3:
    if st.button("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", key="nav_task_list", use_container_width=True):
        st.session_state.current_page = "—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"

with col4:
    if st.button("üîî –°–æ–±—ã—Ç–∏—è", key="nav_events", use_container_width=True):
        st.session_state.current_page = "—Å–æ–±—ã—Ç–∏—è"

with col5:
    if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", key="nav_create", use_container_width=True):
        st.session_state.current_page = "—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"

with col6:
    if st.button("‚ÑπÔ∏è –û –Ω–∞—Å", key="nav_about", use_container_width=True):
        st.session_state.current_page = "–æ –Ω–∞—Å"

# –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
st.markdown("#### üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")
col1, col2, col3, col4 = st.columns(4)

with col1:
    if st.button("üìä –õ–∞–±–∞ #1: Overview", key="nav_lab1", use_container_width=True):
        st.session_state.current_page = "lab1_overview"

with col2:
    if st.button("üîç –õ–∞–±–∞ #2: –§–∏–ª—å—Ç—Ä—ã", key="nav_lab2", use_container_width=True):
        st.session_state.current_page = "lab2_filters"

with col3:
    if st.button("üìà –õ–∞–±–∞ #3: Reports", key="nav_lab3", use_container_width=True):
        st.session_state.current_page = "lab3_reports"

with col4:
    if st.button("üé≠ –õ–∞–±–∞ #4: Maybe/Either", key="nav_lab4", use_container_width=True):
        st.session_state.current_page = "lab4_functional_patterns"

st.markdown("---")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
if st.session_state.current_page == "–ø—Ä–æ–µ–∫—Ç—ã":
    show_projects_page()
elif st.session_state.current_page == "–∑–∞–¥–∞—á–∏":
    show_tasks_page()
elif st.session_state.current_page == "—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
    show_task_list_page()
elif st.session_state.current_page == "—Å–æ–±—ã—Ç–∏—è":
    show_events_page()
elif st.session_state.current_page == "—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
    show_create_task_page()
elif st.session_state.current_page == "lab1_overview":
    show_lab1_overview_page()
elif st.session_state.current_page == "lab2_filters":
    show_lab2_filters_page()
elif st.session_state.current_page == "lab3_reports":
    show_lab3_reports_page()
elif st.session_state.current_page == "lab4_functional_patterns":
    show_lab4_functional_patterns_page()
elif st.session_state.current_page == "–æ –Ω–∞—Å":
    show_about_page()
